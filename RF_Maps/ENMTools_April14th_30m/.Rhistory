if(abs(meansim - meanobs) < epsilon &
abs(varsim-varobs) < epsilon) {
shpost = c(shpost,shprop)
scpost = c(scpost,scprop)
}
}
hist(shpost,100)
hist(scpost,100)
mean(shpost)
mean(scpost)
n = 1000
sh = 2
sc = 2
x = rweibull(n,sh,sc)
meanobs = mean(x)
varobs = var(x)
shpost = c()
scpost = c()
epsilon = 0.05 # try 0.05, 0.02
m = 10^4
for (i in 1:m) {
shprop = rgamma(1,3,3)
scprop = rgamma(1,3,3)
xsim = rweibull(n,shprop,scprop)
meansim = mean(xsim)
varsim = var(xsim)
if(abs(meansim - meanobs) < epsilon &
abs(varsim-varobs) < epsilon) {
shpost = c(shpost,shprop)
scpost = c(scpost,scprop)
}
}
hist(shpost,100)
hist(scpost,100)
mean(shpost)
mean(scpost)
ggplot(data = Gradientsreduced, aes(x=Generation, y = Beta, fill = subset(Gradients,Evolution == "X")))+
geom_point(aes(color = sigB))+
geom_smooth()+
scale_color_manual(values = c("lightgrey","red"))+
geom_hline(yintercept=0, linetype="dashed", color = "black")+
theme(legend.position = "none")+
facet_grid(Player~Evolution)+
annotate(geom='line', Comparison)
library(ggplot2)
ggplot(data = Gradientsreduced, aes(x=Generation, y = Beta, fill = subset(Gradients,Evolution == "X")))+
geom_point(aes(color = sigB))+
geom_smooth()+
scale_color_manual(values = c("lightgrey","red"))+
geom_hline(yintercept=0, linetype="dashed", color = "black")+
theme(legend.position = "none")+
facet_grid(Player~Evolution)+
annotate(geom='line', Comparison)
nstall.packages("installr")
install.packages("installr")
library(installr)
updateR()
install.packages(c("data.table", "ggplot2", "plyr"))
install.packages("phytools")
install.packages("devtools")
install.packages("Rcpp")
install.packages("Phytools")
install.packages("phytools")
install.packages("aRbor")
install.packages("remotes")
remotes::install_github("arborworkflows/aRbor")
remotes::install_github("arborworkflows/aRbor")
install.packages("backports")
install.packages("backports")
remotes::install_github("arborworkflows/aRbor")
Sys.which("make")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
packageVersion("aRbor")
packageVersion("devtools")
packageVersion("ape")
########
library(devtools)
install_github("danlwarren/ENMTools")
install_github("danlwarren/ENMTools")
library(raster)
?SpatialPoints
install.packages("ggmap")
library("ggplot2")
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata"))
library(dplyr)
install.packages("glue")
library(dplyr)
devtools::install_github("thompsonsed/rcoalescence")
library(devtools)
?install_github
start <- c(2016, 4566, 23495, 19349)
poop <- rbind(start)
View(poop)
colnames(poop) <- c("Year", "wages","wage2","sdfg")
View(poop)
knitr::opts_chunk$set(echo = TRUE)
library(ENMTools)
library(raster)
library(plyr)
library(dplyr)
# Depending on what species you want to include, choose a different file to read
# file <- read.csv("NaesiotusData_updatedNovember.csv") # 11/4/20
file <- read.csv("NaesiotusData_updatedNovember_Secondary.csv") # Uses secondary species names in updatedNovember
# Next, read in the CSV for species names
# This step is structured this way so we can easily add new/different species whenever we need to!
sp_list <- read.csv("species_names_Nov.csv") # For November_Secondary
species_list <- sp_list$ï..Species      # Weird i character because of Excel's extra characters
# After that, get your environment variables ready
# You can get 0.5 minute resolution (~1km^2) WorldClim data if you use a lon and lat for the tile you want
env <- raster::getData('worldclim', var='bio', res=0.5, lon = -90.44, lat = -0.69)
# Crop the environment to the extent we figured out in my previous .rmd
env <- crop(env, extent(-90.57163, -90.11387, -0.8867798, -0.3647284))
# Check the MDS to choose good variables and prevent colinearity
raster.cor.plot(env)
# Choosing bio2, bio12, bio3, and bio7
env1 <- env[[c("bio2_32", "bio12_32", "bio3_32", "bio7_32")]]
library(ENMTools)
library(raster)
library(plyr)
library(dplyr)
# Depending on what species you want to include, choose a different file to read
# file <- read.csv("NaesiotusData_updatedNovember.csv") # 11/4/20
file <- read.csv("NaesiotusData_updatedNovember_Secondary.csv") # Uses secondary species names in updatedNovember
# Next, read in the CSV for species names
# This step is structured this way so we can easily add new/different species whenever we need to!
sp_list <- read.csv("species_names_Nov.csv") # For November_Secondary
species_list <- sp_list$ï..Species      # Weird i character because of Excel's extra characters
# After that, get your environment variables ready
# You can get 0.5 minute resolution (~1km^2) WorldClim data if you use a lon and lat for the tile you want
env <- raster::getData('worldclim', var='bio', res=0.5, lon = -90.44, lat = -0.69)
# Crop the environment to the extent we figured out in my previous .rmd
env <- crop(env, extent(-90.57163, -90.11387, -0.8867798, -0.3647284))
# Check the MDS to choose good variables and prevent colinearity
raster.cor.plot(env)
# Choosing bio2, bio12, bio3, and bio7
env1 <- env[[c("bio2_32", "bio12_32", "bio3_32", "bio7_32")]]
# Initialize dataframe with my messy bloop blarp technique
# lon, lat, suitability, species
bloop <- c(-90, -0.3, 0.02, 'Ignore')
blarp <- c(-90, -0.3, 0.02, 'Ignore')
mega_snails <- rbind(bloop, blarp)
colnames(mega_snails) <- c("lon","lat","suitability","species")
# For each species in our list, find suitability info
for(sp in species_list) {
species_name <- sp
# Grab all row numbers that have this species
selection <- which(file$Species == species_name)
# Create new data frame with just that species' info and add to a massive dataframe
species_data <- file[selection,]
# Presence lat and lon
lat <- species_data$Latitude
lon <- species_data$Longitude
latlong <- cbind.data.frame(lat, lon)
# For now, background points are just points of other species
anti_selection <- which(file$Species != species_name)
# Create data frame with the background species' info
background_data <- file[anti_selection,]
# Background lat and lon
lat <- background_data$Latitude
lon <- background_data$Longitude
latlongbg <- cbind.data.frame(lat, lon)
# Make sure the background data does not have presence data points
# Returns all rows from latlongbg WITHOUT a match in latlong
latlongbg <- anti_join(latlongbg, latlong)
# Declare the enmtools.species object using the species name and presence points
snail <- enmtools.species(species.name = species_name,
presence.points = latlong)
# ENMTools can create a range raster using presence points as a reference
radius <- 5   # Radius for circular buffers to draw around points, in meters
snail$range <- background.raster.buffer(snail$presence.points, radius, mask = env)
# Add the background points to the enmtools.species object
snail$background.points <- latlongbg
# After creating the species object, use check.species to make sure it's set up properly
snail <- check.species(snail)
# Build the GLM
snail.glm <- enmtools.glm(species = snail, env = env1, f = pres ~ bio2_32 + bio12_32 + bio3_32 + bio7_32)
# Grab just the suitability part of the GLM
suitable <- snail.glm$suitability
# Turn the suitability information into a dataframe of points and suitability values
suit_points <- rasterToPoints(suitable)
df <- as.data.frame(suit_points)
colnames(df) <-  c("lon", "lat", "suitability")
df <- cbind(df, species=sp)     # Add the species as a column so we can match species to points
# Grab all row numbers that have a high suitability (>=0.80)
great_points <- which(df$suitability >= 0.80)
# Create new data frame with just those rows
points_df <- df[great_points,]
# Bind these points to the mega dataframe
mega_snails <- rbind(mega_snails, points_df)
}
View(mega_snails)
View(mega_snails)
mega_snails_1 <- mega_snails[-c(1,2),] # Delete the first two rows
# First, determine max/min lat/lon
# (from Google Earth)
maxLat <- -0.3875     # From mega_snails
# maxLat <- -0.413861   # Top
minLat <- -0.773690   # Bottom
maxLon <- -90.169965  # Right
# minLon <- -90.548057  # Left
minLon <- -90.55417   # From mega_snails
# Next, create a function to give you the square that the coordinate goes into
grid <- function(lat, lon) {
latsq <- (lat - minLat)/(maxLat-minLat) * 800  # 800 squares
latsq <- ceiling(latsq)                        # Take the ceiling of the result
lonsq <- (lon - minLon)/(maxLon-minLon) * 800
lonsq <- ceiling(lonsq)
return(c(lonsq,latsq))
}
# Make a new dataframe
# Species, lonsq, latsq
bloop <- c('Ignore', 1, 2)
blarp <- c('Ignore', 1, 2)
sq_species <- rbind(bloop, blarp)
colnames(sq_species) <- c("species", "lonsq", "latsq")
# Now go through mega_snails_1 to find where each lat/lon pair goes
for(r in 1:nrow(mega_snails_1)) {
# Get lat and lon
lat <- as.numeric(mega_snails_1[r,2])
lon <- as.numeric(mega_snails_1[r,1])
# Find the grid coordinate
sq_pair <- grid(lat,lon)
# Add the species name
species <- mega_snails_1[r,4]
# rbind the new info to the dataframe
add <- c(species, sq_pair)
sq_species <- rbind(sq_species, add)
}
sq_species_1 <- sq_species[-c(1,2),] # Delete the first two rows
df <- as.data.frame(sq_species_1) # Convert to a dataframe for easier plotting
# I wanted to visualize how many points overlap, so I used this library:
library(plotrix)
count.overplot(as.numeric(df$lonsq), as.numeric(df$latsq), tol = 0)
# Create a dataframe of just the coordinates for easier plyr use
coord <- data.frame(df$lonsq, df$latsq)
# Figure out how many rows are the same (how many coordinates overlap)
woops <- ddply(coord, .(coord$df.lonsq,coord$df.latsq), nrow)
View(woops)
# Figure out how many rows are the same (how many coordinates overlap)
coord_same <- ddply(coord, .(coord$df.lonsq,coord$df.latsq), nrow)
# Get rows that have >= 9 of the same coordinates
lotsosnails <- which(coord_same$V1 >= 9)
snail_df <- coord_same[lotsosnails,]
View(snail_df)
# Finally, plot the points with the greatest number of species
plot(df$lonsq, df$latsq, col = rgb(red = 0, green = 0, blue = 0, alpha = 0.2),
pch = 16)
points(snail_df$`coord$df.lonsq`, snail_df$`coord$df.latsq`, col = 'red', pch = 20)
ints <- c(1,2,3,4,5,0,6,7,0,9)
ints
typeof(ints)
?str_remove
?lapply
lapply(ints, function(x) {x[x!=0]})
test <- lapply(ints, function(x) {x[x!=0]})
test
test[1]
test[1] + test[2]
?apply
test <- apply(ints, function(x) {x[x!=0]})
apply(ints, function(x) {x[x!=0]})
for(i in c(1:10)) {
poop <- i
assign(paste("Doop", i, sep=""),poop)
}
Doop1
Doop10
bloop <- c(-90, -0.3, 0.02, 'Ignore')
blarp <- c(-90, -0.3, 0.02, 'Ignore')
mega_snails <- rbind(bloop, blarp)
for(i in c(1:10)) {
poop <- i
assign(paste("Doop", i, sep=""),mega_snails)
}
identical(Doop1, Doop2)
?diff
?citation
citation(package="base")
citation("BSDA")
?lm
library(geiger)
?brownian motion
?brownian
require(geiger)
tt<-sim.bdtree(b=1, d=0, n = 100)
vcv<-diag(1, nrow=4)
dd<-sim.char(phy = tt, par=vcv, nsim=1)
inv.logit<-function(x)
return(exp(x)/(1+exp(x)))
value<-inv.logit(dd[,1,1])*256
chroma<-inv.logit(dd[,2,1])*256
hue<-dd[,3,1] %% 360
hue
require(geiger)
tt<-sim.bdtree(b=1, d=0, n = 100)
vcv<-diag(1, nrow=4)
dd<-sim.char(phy = tt, par=vcv, nsim=1)
inv.logit<-function(x)
return(exp(x)/(1+exp(x)))
value<-inv.logit(dd[,1,1])
chroma<-inv.logit(dd[,2,1])
hue<-(dd[,3,1] %% 360)/360
mycol<-hsv(h=hue, s=chroma, v=value)
plot(rep(1,100),col=mycol,pch=19,cex=1)
?plot
plot(rep(1,200),col=mycol,pch=19,cex=1)
library(ENMTools)
library(raster)
library(dplyr)
setwd("~/Side Projects/SnailENM")
file <- read.csv("NaesiotusData_updatedApril3.csv") # 4/14/21
sp_list <- read.csv("species_names_April.csv") # For April 1/14
species_list <- sp_list$ï..Species
# You can get 0.5 minute resolution (~1km^2) WorldClim data if you use a lon and lat for the tile you want
env <- raster::getData('worldclim', var='bio', res=0.5, lon = -90.44, lat = -0.69)
setwd("E:/30m")
cti <- raster("cti30.tif")
east <- raster("eastness30.tif")
elevation <- raster("elevation30.tif")
hli <- raster("hli30.tif")
LSTwet <- raster("LST_wet30.tif")
NDVI_wet <- raster("NDVI_wet30.tif")
north <- raster("northness30.tif")
slope <- raster("slope30.tif")
solar <- raster("solar30.tif")
NDVIwet <- raster("NDVI_wet30.tif")
rasterlist <- c(cti, east, elevation, hli, LSTwet, NDVIwet, north, slope, solar)
env1 <- stack(rasterlist)
nlayers(env1) # Just to check if they're all there
env1 <- crop(env1, extent(-90.57163, -90.11387, -0.8867798, -0.3647284))
raster.cor.plot(env1)
bloop <- c(-90, -0.3, 0.02, 'Ignore')
blarp <- c(-90, -0.3, 0.02, 'Ignore')
maps <- list()  # Create list for plots
mega_snails <- rbind(bloop, blarp)
colnames(mega_snails) <- c("lon","lat","suitability","species")
# For each species in our list, find suitability info
for(sp in species_list) {
species_name <- sp
# Grab all row numbers that have this species
selection <- which(file$Species == species_name)
# Create new data frame with just that species' info and add to a massive dataframe
species_data <- file[selection,]
# Presence lat and long
lat <- species_data$Latitude
lon <- species_data$Longitude
latlong <- cbind.data.frame(lat, lon)
# For now, background points are just points of other species
anti_selection <- which(file$Species != species_name)
# Create data frame with the background species' info
background_data <- file[anti_selection,]
# Background lat and long
lat <- background_data$Latitude
lon <- background_data$Longitude
latlongbg <- cbind.data.frame(lat, lon)
# Make sure the background data does not have presence data points
# Returns all rows from latlongbg WITHOUT a match in latlong
latlongbg <- anti_join(latlongbg, latlong)
# Declare the enmtools.species object using the species name and presence points
snail <- enmtools.species(species.name = species_name,
presence.points = latlong)
# ENMTools can create a range raster using presence points as a reference
radius <- 5   # Radius for circular buffers to draw around points, in meters
snail$range <- background.raster.buffer(snail$presence.points, radius, mask = env)
# Add the background points to the enmtools.species object
snail$background.points <- latlongbg
# After creating the species object, use check.species to make sure it's set up properly
snail <- check.species(snail)
# Build the model (always called snail.glm because I am lazy)
#Linear GLM
#snail.glm <- enmtools.glm(species = snail, env = env1, f = pres ~ bio2_32 + bio12_32 + bio3_32 + bio7_32)
# Polynomial GLM
#snail.glm <- enmtools.glm(species = snail, env = env1, f = pres ~ bio2_32 + bio12_32 + bio3_32 + bio7_32 + poly(bio2_32,2) + poly(bio12_32,2) + poly(bio3_32,2) + poly(bio7_32,2))
snail.glm <- enmtools.glm(species = snail, env = env1, f = pres ~ cti30 + slope30 + solar30 + eastness30 + northness30 + poly(cti30,2) + poly(slope30,2) + poly(solar30,2) + poly(eastness30,2) + poly(northness30,2))
# Random forest
#snail.glm <- enmtools.rf(species = snail, env = env1)
# MAXENT
#if(requireNamespace("rJava", quietly = TRUE)) {
#  snail.glm <- enmtools.maxent(species = snail, env = env1)
#}
# p_data <- raster::extract(env1, latlong[,2:1]) # Need to switch lat and long
# a_data <- raster::extract(env1,latlongbg[,2:1])
#
# p_data2 <- cbind(response=1, p_data)
# a_data2 <- cbind(response=0, a_data)
# pa_data <- rbind(p_data2, a_data2)
#
# size <- nrow(latlong) # Number of presence points
#
# rf1 <- randomForest(as.factor(response) ~ . , pa_data, sampSize=c(size,size), ntree=500, strata=as.factor(response))
# plot1 <- predict(env1, rf1)
# maps[[sp]] <- plot1
maps[[sp]] <- snail.glm
# Grab just the suitability part of the GLM
suitable <- snail.glm$suitability
# Turn the suitability information into a dataframe of points and suitability values
suit_points <- rasterToPoints(suitable)
df <- as.data.frame(suit_points)
colnames(df) <-  c("lon", "lat", "suitability")
df <- cbind(df, species=sp)     # Add the species as a column so we can match species to points
# Grab all row numbers that have a high suitability (>=0.80)
great_points <- which(df$suitability >= 0.80)
#great_points <- which(df$suitability >= 0.60)
# Create new data frame with just those rows
points_df <- df[great_points,]
# Bind these points to the mega dataframe
mega_snails <- rbind(mega_snails, points_df)
}
mega_snails_1 <- mega_snails[-c(1,2),] # Delete the first two rows
setwd("~/GitHub/snailParty/GLM_Maps/April_23rd_30m_Again")
library(stringr)
# Since R can't save images and do the analysis in the same loop, here's this
for(sp in species_list) {
species <- str_replace(sp, " ", "_")
name <- paste0("GLM_", species,".png")
# Open image file and save plot image
png(filename = name, width = 800, height = 700)
print(maps[[sp]])
dev.off()
}
warnings()
bloop <- c(-90, -0.3, 0.02, 'Ignore')
blarp <- c(-90, -0.3, 0.02, 'Ignore')
maps <- list()  # Create list for plots
mega_snails <- rbind(bloop, blarp)
colnames(mega_snails) <- c("lon","lat","suitability","species")
# For each species in our list, find suitability info
for(sp in species_list) {
species_name <- sp
# Grab all row numbers that have this species
selection <- which(file$Species == species_name)
# Create new data frame with just that species' info and add to a massive dataframe
species_data <- file[selection,]
# Presence lat and long
lat <- species_data$Latitude
lon <- species_data$Longitude
latlong <- cbind.data.frame(lat, lon)
# For now, background points are just points of other species
anti_selection <- which(file$Species != species_name)
# Create data frame with the background species' info
background_data <- file[anti_selection,]
# Background lat and long
lat <- background_data$Latitude
lon <- background_data$Longitude
latlongbg <- cbind.data.frame(lat, lon)
# Make sure the background data does not have presence data points
# Returns all rows from latlongbg WITHOUT a match in latlong
latlongbg <- anti_join(latlongbg, latlong)
# Declare the enmtools.species object using the species name and presence points
snail <- enmtools.species(species.name = species_name,
presence.points = latlong)
# ENMTools can create a range raster using presence points as a reference
radius <- 5   # Radius for circular buffers to draw around points, in meters
snail$range <- background.raster.buffer(snail$presence.points, radius, mask = env)
# Add the background points to the enmtools.species object
snail$background.points <- latlongbg
# After creating the species object, use check.species to make sure it's set up properly
snail <- check.species(snail)
# Build the model (always called snail.glm because I am lazy)
#Linear GLM
#snail.glm <- enmtools.glm(species = snail, env = env1, f = pres ~ bio2_32 + bio12_32 + bio3_32 + bio7_32)
# Polynomial GLM
#snail.glm <- enmtools.glm(species = snail, env = env1, f = pres ~ bio2_32 + bio12_32 + bio3_32 + bio7_32 + poly(bio2_32,2) + poly(bio12_32,2) + poly(bio3_32,2) + poly(bio7_32,2))
#snail.glm <- enmtools.glm(species = snail, env = env1, f = pres ~ cti30 + slope30 + solar30 + eastness30 + northness30 + poly(cti30,2) + poly(slope30,2) + poly(solar30,2) + poly(eastness30,2) + poly(northness30,2))
# Random forest
snail.glm <- enmtools.rf(species = snail, env = env1)
# MAXENT
#if(requireNamespace("rJava", quietly = TRUE)) {
#  snail.glm <- enmtools.maxent(species = snail, env = env1)
#}
# p_data <- raster::extract(env1, latlong[,2:1]) # Need to switch lat and long
# a_data <- raster::extract(env1,latlongbg[,2:1])
#
# p_data2 <- cbind(response=1, p_data)
# a_data2 <- cbind(response=0, a_data)
# pa_data <- rbind(p_data2, a_data2)
#
# size <- nrow(latlong) # Number of presence points
#
# rf1 <- randomForest(as.factor(response) ~ . , pa_data, sampSize=c(size,size), ntree=500, strata=as.factor(response))
# plot1 <- predict(env1, rf1)
# maps[[sp]] <- plot1
maps[[sp]] <- snail.glm
# Grab just the suitability part of the GLM
suitable <- snail.glm$suitability
# Turn the suitability information into a dataframe of points and suitability values
suit_points <- rasterToPoints(suitable)
df <- as.data.frame(suit_points)
colnames(df) <-  c("lon", "lat", "suitability")
df <- cbind(df, species=sp)     # Add the species as a column so we can match species to points
# Grab all row numbers that have a high suitability (>=0.80)
great_points <- which(df$suitability >= 0.80)
#great_points <- which(df$suitability >= 0.60)
# Create new data frame with just those rows
points_df <- df[great_points,]
# Bind these points to the mega dataframe
mega_snails <- rbind(mega_snails, points_df)
}
mega_snails_1 <- mega_snails[-c(1,2),] # Delete the first two rows
setwd("~/GitHub/snailParty/RF_Maps/ENMTools_April14th_30m")
library(stringr)
# Since R can't save images and do the analysis in the same loop, here's this
for(sp in species_list) {
species <- str_replace(sp, " ", "_")
name <- paste0("GLM_", species,".png")
# Open image file and save plot image
png(filename = name, width = 800, height = 700)
print(maps[[sp]])
dev.off()
}
